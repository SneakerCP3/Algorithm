# -*- coding: utf-8 -*-
class Node():
    """单链表的结点"""
    def __init__(self,item):
        # item存放数据元素
        self.item = item
        # next是下一个节点的标识
        self.next = None

class SingleLinkList():
    '''为链表定义一些方法'''
    def __init__(self):
        '''单链表，链表需要具有首地址指针head'''
        self.head = None

    def is_empty(self):
        '''
        判断链表是否为空
        :return:
        '''
        return self.head is None

    def length(self):
        '''
        链表长度
        :return:
        '''
        count = 0
        cur = self.head
        while cur is not None:
            count += 1
            # 指针下移
            cur = cur.next
        return count

    def itmes(self):
        '''
        获取链表数据迭代器，遍历链表
        :return:
        '''
        cur = self.head
        while cur is not None:
            # 返回生成器
            yield cur.item
            # 指针下移
            cur = cur.next
    def add(self,item):
        '''
        向代码头部添加元素
        :param item:
        :return:
        '''
        node = Node(item)
        # 新节点指针指向原头部节点
        node.next = self.head
        # 头部节点指针修改为新节点
        self.head = node

    def append(self,item):
        '''
        尾部添加元素
        :param item:
        :return:
        '''
        node = Node(item)
        # 先判断是否为空链表
        if self.is_empty():
            # 空链表，head指向新节点
            self.head = node
        else:
            # 不是空链表，则找到尾邻，将尾部next节点指向新节点
            cur = self.head
            while cur.next is not None:
                cur = cur.next
            cur.next = node
    def insert(self,index,item):
        '''
        指定位置插入元素
        :param item:
        :return:
        '''
        # 指定位置在第一个元素之前，在头部插入
        if index <= 0:
            self.add(item)
        # 指定位置超过尾部，在尾部插入
        elif index >= (self.length() - 1):
            self.append(item)
        else:
            # 创建元素节点
            node = Node(item)
            cur = self.head
            for i in range(index - 1 ):
                cur = cur.next
            node.next = cur.next
            cur.next = node

    def remove(self,item):
        '''
        删除节点
        :param item:
        :return:
        '''
        cur = self.head
        pre = None
        while cur is not None:
            # 找到指定元素
            if cur.item == item:
                # 如果第一个就是删除的节点
                if not pre:
                    # 将头指针指向头节点的后一个节点
                    self.head = cur.next
                else:
                    # 将删除位置前一个节点的next指向删除位置的后一个节点
                    pre.next = cur.next
                return True
            else:
                # 继续按链表后移节点
                pre = cur
                cur = cur.next

    def find(self,item):
        '''
        查找元素是否存在
        :param item:
        :return:
        '''
        return item in self.itmes()

# 操作链表
if __name__ == '__main__':
    link_list = SingleLinkList()
    # 向链表尾部添加数据
    for i in range(5):
        link_list.append(i)

    # 向头部添加数据
    link_list.add(6)

    for i in link_list.itmes():
        print(i,end='\t')

    print(link_list.find(4))
